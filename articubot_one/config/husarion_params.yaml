amcl:
  ros__parameters:
    use_sim_time: False

    global_frame_id: map
    odom_frame_id: odom
    base_frame_id: base_link

    scan_topic: scan_filtered

    # Galactic
    # robot_model_type: differential
    # Humble
    robot_model_type: nav2_amcl::DifferentialMotionModel

    set_initial_pose: True
    always_reset_initial_pose: True
    initial_pose:
      x: 0.0
      y: 0.0
      yaw: 0.0

    tf_broadcast: True
    transform_tolerance: 1.0

    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2

    # Beam skipping - ignores beams for which a majoirty of particles do not agree with the map
    # prevents correct particles from getting down weighted because of unexpected obstacles
    # such as humans
    do_beamskip: False
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3

    lambda_short: 0.1

    laser_model_type: likelihood_field
    laser_likelihood_max_dist: 2.0
    laser_max_range: 12.0
    laser_min_range: -1.0

    max_beams: 60

    max_particles: 25000
    min_particles: 6000

    pf_err: 0.05
    pf_z: 0.99

    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0

    resample_interval: 1
    save_pose_rate: 0.5
    sigma_hit: 0.2

    update_min_a: 0.1
    update_min_d: 0.15

    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "map.yaml"
    
bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link

    # groot monitoring will no longer be supported in humble https://github.com/ros-planning/navigation2/pull/2696
    # it sometimes crashes
    enable_groot_monitoring: False
    # groot_zmq_publisher_port: 1666
    # groot_zmq_server_port: 1667

    default_nav_to_pose_bt_xml: /navigate_w_recovery.xml
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_distance_traveled_condition_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False

    controller_frequency: 10.0

    # if velocity is below threshold value it is set to 0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001

    progress_checker_plugin: "progress_checker"
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    goal_checker_plugin: "goal_checker"
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.1
      yaw_goal_tolerance: 0.25
      stateful: True # if stateful is true goal checker will not check if the xy position matches again once it is found to be true.

    controller_plugins: ["FollowPath"]
    FollowPath:
      # Shim controller first rotates robot in place to orientation of global path
      # and the switches to DWB - otherwise DWB won't turn in place, but with arc, which
      # is less optimal
      plugin: "nav2_rotation_shim_controller::RotationShimController"
      primary_controller: "dwb_core::DWBLocalPlanner"
      angular_dist_threshold: 0.4 # quite low value to avoid moving in arc
      forward_sampling_distance: 0.5
      rotate_to_heading_angular_vel: 1.5
      # I'm not sure why, but ang vel is limited max_angular_accel param divided by 10
      # actual acceleration will be limited by controller, so it can be set to higher value
      max_angular_accel: 10.0
      simulate_ahead_time: 1.0

      debug_trajectory_details: True

      # Velocity/accelaration limits also have to be adjusted in the velocity smoother
      min_vel_x: 0.0
      max_vel_x: 0.5
      acc_lim_x: 1.0
      decel_lim_x: -0.5
      min_speed_xy: 0.007
      max_speed_xy: 0.5

      max_vel_theta: 1.5
      min_speed_theta: 0.4
      acc_lim_theta: 4.0
      decel_lim_theta: -4.0

      min_vel_y: 0.0
      max_vel_y: 0.0
      acc_lim_y: 0.0
      decel_lim_y: 0.0

      vx_samples: 20
      vy_samples: 0
      vtheta_samples: 20

      transform_tolerance: 1.0
      short_circuit_trajectory_evaluation: True

      trajectory_generator_name: "dwb_plugins::StandardTrajectoryGenerator"
      sim_time: 0.75 # low value to avoid slow movement near goal
      discretize_by_time: False
      linear_granularity: 0.05
      angular_granularity: 0.025

      # Critics used for scoring trajectories created by trajectory generator
      # Final score is a sum of critics' score
      critics:
        [
          "BaseObstacle",
          "ObstacleFootprint",

          "GoalAlign",
          "GoalDist",

          "PathAlign",
          "PathDist",

          "RotateToGoal",
          "Oscillation",
        ]

      BaseObstacle.scale: 0.02

      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      GoalDist.scale: 24.0

      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0

      xy_goal_tolerance: 0.1
      trans_stopped_velocity: 0.25
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: False

      global_frame: odom
      robot_base_frame: base_link

      update_frequency: 5.0
      publish_frequency: 2.0

      width: 3
      height: 3
      resolution: 0.05

      always_send_full_costmap: True
      rolling_window: True

      footprint: "[[0.165, 0.145], [0.165, -0.145], [-0.165, -0.145], [-0.165, 0.145]]"

      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        #enabled: True
        map_subscribe_transient_local: True # QoS setting; durability policy transient local, combined with any depth, provides functionality similar to that of latching publishers
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan_filtered
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 2.5
          raytrace_min_range: 0.0
          obstacle_max_range: 2.0
          obstacle_min_range: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True
        cost_scaling_factor: 3.0
        inflation_radius: 0.55

  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: False

      global_frame: map
      robot_base_frame: base_link

      update_frequency: 1.0
      publish_frequency: 1.0

      resolution: 0.05

      always_send_full_costmap: True
      track_unknown_space: True # if false, treats unknown space as free space, else as unknown space

      footprint: "[[0.165, 0.145], [0.165, -0.145], [-0.165, -0.145], [-0.165, 0.145]]"

      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: True
        map_subscribe_transient_local: True
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True
        cost_scaling_factor: 3.0
        inflation_radius: 0.55

map_server:
  ros__parameters:
    use_sim_time: False
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    use_sim_time: False

    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_smac_planner/SmacPlanner2D"
      tolerance: 0.125 # tolerance for planning if unable to reach exact pose, in meters
      downsample_costmap: False # whether or not to downsample the map
      downsampling_factor: 1 # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: true # allow traveling in unknown space
      max_iterations: 1000000 # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000 # maximum number of iterations to attempt to reach goal once in tolerance
      max_planning_time: 2.0 # max time in s for planner to plan, smooth
      motion_model_for_search: "MOORE" # 2D Moore, Von Neumann
      cost_travel_multiplier: 2.0 # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      use_final_approach_orientation: False # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 0.00000001

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    use_sim_time: False

    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1

    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0

    # spin
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    use_sim_time: False
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

behavior_server:
  ros__parameters:
    use_sim_time: False

smoother_server:
  ros__parameters:
    use_sim_time: False

velocity_smoother:
  ros__parameters:
    use_sim_time: False

    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [3.0, 0.0, 4.0]
    min_velocity: [-1.0, 0.0, -2.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    # used in the CLOSED_LOOP feedback mode
    # odom_topic: "odom"
    # odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
